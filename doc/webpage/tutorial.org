#+TITLE: Illinois-SL Tutorial
#+STARTUP: customtime
#+OPTIONS: num:nil
#+INCLUDE: "~/Dropbox/Private/org/revision/my_latex_preamble.org"

* Getting Started
Illinois-SL is a general purpose JAVA library for performing structured learning. 
It houses learning algorithms like averaged Structured Perceptron and Structured SVM with L2-Loss, and provides a minimal interface for your structured learning needs.
The training algorithm employed for training SSVM is dual coordinate descent(DCD), which has been proven to have very good convergence properties. 
Illinois-SL comes with an efficient implementation of DCD with support for multi-threading.

In this tutorial, we will walk you through installation, some simple examples on how to use this package.
* Download and Installation
You can download the Illinois-SL package from [[http://cogcomp.cs.illinois.edu/page/software_view/illinois-sl][here]].

* Basics
We need to implement the following,

1) The input structure, $\x$. This should implement the =IInstance= interface.
2) The output structure, $\y$. This should implement the =IStructure= interface.
3) A procedure to compute the feature vector $\Phi(\x,\y)$. For this you need to extned the =AbstractFeatureGenerator= class and override its =getFeatureVector= method.
4) A procedure =InferenceSolver= to perform the loss-augmented inference,
   \begin{align*}
   \argmax_{\y'} \w^T \Phi(\x,\y') + \Delta(\y,\y')
   \end{align*}
   For this you need to extend the =AbstractInferenceSolver= class.

At test time, we need to solve 
\begin{align*}
  \argmax_{\y'} \w^T \Phi(\x,\y')
\end{align*}
We will call this the MAP inference problem.
For this we can just set $\Delta(\y,\y')$ to zero in the loss-augmented inference solver.

* Examples
  - [[./pos.html][POS Tagging]]
* TODO Example - Multiclass Classification			   :noexport:
\begin{align*}
\w = \begin{bmatrix}
\w_1 & \w_2 & \cdots & \w_M
\end{bmatrix} \\
\Phi(\x,i) = \begin{bmatrix}
\underbrace{0 \cdots 0}_{\text{block 1 to i-1}} & \underbrace{\Phi(\x)}_{\text{block i}} & \underbrace{0 \cdots 0}_{\text{block i+1 to M}}
\end{bmatrix}
\end{align*}
* Final Remarks
You can find the source code for the POS tagging example at 'src/main/java/edu/illinois/cs/cogcomp/sl/applications/tutorial'
in the downloaded package.
You can also find a simple script to run the POS tagging example at 'scripts/run_tutorial.sh'.
It will train your model, and test it on a toy dataset.
* Contact
You can post your questions and comments at [[mailto:illinois-ml-nlp-users@cs.uiuc.edu][illinois-ml-nlp-users@cs.uiuc.edu]]
